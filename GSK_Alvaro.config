process {
    executor = 'slurm'
    //queue = 'htc-el8'
    cpus = 5
    memory = 10.GB
    time = 10.min
    maxRetries    = 1
    //container = "docker://segonzal/fish_analysis:0.0.3"

    withLabel: 'infinitesimal' {
        cpus = 1
        memory = 200.MB
        time = 3.min
    }

    withLabel: 'tiler' {
        cpus = {10* task.attempt }
        memory = {64.GB* task.attempt }
        time = {25.min* task.attempt }
    }

    withLabel: 'minimal' {
        cpus = {1 * task.attempt }
        memory = {400.MB * task.attempt }
        time = {3.min * task.attempt }
    }

    withLabel: 'singleImage' {
        cpus = {1 * task.attempt }
        memory = {16.GB * task.attempt }
        time = {5.min * task.attempt }
    }

    withLabel: 'learn_registration' {
        cpus = {15  * task.attempt }
        memory = {64.GB * task.attempt }
        time = {20.min * task.attempt }
        //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    
    }
    
    withLabel: 'apply_registration' {
        cpus = {30  * task.attempt }
        memory = {128.GB * task.attempt }
        time = {60.min * task.attempt }
        //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    
    }

    withLabel: 'concat' {
        cpus = {20  * task.attempt }
        memory = {32.GB * task.attempt }
        time = {20.min * task.attempt }
        //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    
    }

    withLabel: 'small' {
        cpus = {5 * task.attempt }
        memory = {16.GB * task.attempt }
        time = {5.min * task.attempt }
    }

    withLabel: 'decoding_starfish' {
        cpus = {40  * task.attempt }
        memory = {128.GB * task.attempt }
        time = {90.min * task.attempt }
    }

    withLabel: 'decoding_postcode' {
        cpus = {40  * task.attempt }
        memory = {128.GB * task.attempt }
        time = {30.min * task.attempt }
    }

    withLabel: 'long' {
        cpus = {8 * task.attempt }
        memory = {32.GB * task.attempt }
        time = {40.min * task.attempt }
    }

    withLabel: 'beast' {
        cpus = {40 * task.attempt }
        memory = {256.GB * task.attempt }
        time = {60.min * task.attempt }
    }
}
conda.enabled = true
process.conda = "/home/nv066607/.conda/envs/issdecoder_MyEnv"

apptainer {
    enabled = true
	autoMounts = true
}
def INPUTDIR = "/hpc/scratch/weka01/nv066607/breast_cancer_data/PD9694d2_Immune_imgs/Stitched/"
   
params {
    PoSTcode = true
    inputRefImagePath = INPUTDIR + "anchor_nuclei.tif*"
    inputMovImagesLearnPath = INPUTDIR + "r*_DAPI.tif*"
    movingImagesApplyPath = INPUTDIR + "r*_*.tif*"
    inputUntransformedImagesPath = INPUTDIR + "anchor_*.tif*"
    elastix_parameter_files =  "/home/nv066607/python_github_enterprise/migratedVersion/issdecoder/elastix_parameter_files/elastix_parameters_2D.*.txt"
    ExpMetaJSON = "/hpc/scratch/hdd4/nv066607/iss-nf/data/experiment_metadata_BreastCancer.json"
    CodeJSON = "/hpc/scratch/hdd4/nv066607/iss-nf/codebook.json"
    PoSTcode = true
    filt = false
    filt_radius = 5
    rescale_factor = "5",
    SimpleLookupDecoder = True
}
