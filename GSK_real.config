process {
    executor = 'slurm'
    //queue = 'htc-el8'
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 600.MB * task.attempt, 'memory' ) }
    time   = { check_max( 10.min  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}
beforeScript = {
    println "Creating QC_outputDir: ${params.qc_outputDir}"
    def qcDir = new File(params.qc_outputDir)
    if (!qcDir.exists()) {
        qcDir.mkdirs()
    } else {
        println "QC_outputDir already exists: ${params.qc_outputDir}"
    }
}
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

apptainer {
    enabled = true
	autoMounts = true
}

def INPUTDIR = "/hpc/scratch/hdd1/nv066607/ISS_tmp/ISS_425_NSCLC199_BL3/Stitched/"

params {
    inputRefImagePath = INPUTDIR + "anchor_nuclei.tiff"
    inputMovImagesLearnPath = INPUTDIR + "r{1,2,3,4,5,6}_DAPI.tiff"
    movingImagesApplyPath = INPUTDIR + "r{1,2,3,4,5,6}_*.tiff"
    inputUntransformedImagesPath = INPUTDIR + "anchor_*.tiff"
    elastix_parameter_files = "/home/nv066607/python_github_enterprise/migratedVersion/issdecoder/elastix_parameter_files"
    //tile_size = 2000
    outputDir = "/hpc/scratch/hdd1/nv066607/ISS_tmp/TilerOutput"
    ExpMetaJSON = "/home/nv066607/python_github_enterprise/iss-nf/data/experiment_metadata_sample.json"
    CodeJSON = "/home/nv066607/python_github_enterprise/iss-nf/data/codebook.json"
    //fov = "fov_001"
    qc_outputDir =  INPUTDIR + "QC_report"
}
