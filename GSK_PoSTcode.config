process {
    executor = 'slurm'
    //queue = 'htc-el8'
    cpus = 5
    memory = 10.GB
    time = 10.min
    maxRetries    = 1
    //container = "docker://segonzal/fish_analysis:0.0.3"

    withLabel: 'infinitesimal' {
        cpus = 1
        memory = 200.MB
        time = 3.min
    }

    withLabel: 'tiler' {
        cpus = {10* task.attempt }
        memory = {64.GB* task.attempt }
        time = {25.min* task.attempt }
    }

    withLabel: 'minimal' {
        cpus = {1 * task.attempt }
        memory = {400.MB * task.attempt }
        time = {3.min * task.attempt }
    }

    withLabel: 'singleImage' {
        cpus = {1 * task.attempt }
        memory = {16.GB * task.attempt }
        time = {5.min * task.attempt }
    }

    withLabel: 'learn_registration' {
        cpus = {10  * task.attempt }
        memory = {32.GB * task.attempt }
        time = {10.min * task.attempt }
        //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    
    }
    
    withLabel: 'apply_registration' {
        cpus = {30  * task.attempt }
        memory = {64.GB * task.attempt }
        time = {30.min * task.attempt }
        //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    
    }

    withLabel: 'concat' {
        cpus = {10  * task.attempt }
        memory = {32.GB * task.attempt }
        time = {5.min * task.attempt }
        //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    
    }

    withLabel: 'small' {
        cpus = {5 * task.attempt }
        memory = {16.GB * task.attempt }
        time = {5.min * task.attempt }
    }

    withLabel: 'decoding_starfish' {
        cpus = {20  * task.attempt }
        memory = {32.GB * task.attempt }
        time = {30.min * task.attempt }
    }

    withLabel: 'decoding_postcode' {
        cpus = {20  * task.attempt }
        memory = {80.GB * task.attempt }
        time = {20.min * task.attempt }
    }

    withLabel: 'long' {
        cpus = {8 * task.attempt }
        memory = {32.GB * task.attempt }
        time = {40.min * task.attempt }
    }

    withLabel: 'beast' {
        cpus = {30 * task.attempt }
        memory = {64.GB * task.attempt }
        time = {60.min * task.attempt }
    }
}
conda.enabled = true
process.conda = "/home/nv066607/.conda/envs/issdecoder_MyEnv"

apptainer {
    enabled = true
	autoMounts = true
}
def INPUTDIR = "/hpc/scratch/hdd3/nv066607/poSTcode_example/S-BSST700/outputs/"
   
params {
    PoSTcode = true
    inputFixImagePath = INPUTDIR + "anchor_nuclei.tiff"
    inputMovImagesLearnPath = INPUTDIR + "r*_DAPI.tiff"
    movingImagesApplyPath = INPUTDIR + "r*_*.tiff"
    inputUntransformedImagesPath = INPUTDIR + "anchor_*.tiff"
    elastix_parameter_files = "/scratch/segonzal/iss-nf/parameter_files/elastix_parameters_2D.*.txt"
    ExpMetaJSON = "/hpc/scratch/hdd2/nv066607/iss-nf/postcode_example/experiment_metadata_postcode_data.json"
    CodeJSON = "/hpc/scratch/hdd2/nv066607/iss-nf/postcode_example/codebook.json"
    primary_coords = "/hpc/scratch/hdd3/nv066607/poSTcode_example/S-BSST700/outputs/*coordinates.csv"
    fovs2decode = "/hpc/scratch/hdd3/nv066607/poSTcode_example/S-BSST700/outputs/fovs.txt"
    tile_images = "/hpc/scratch/hdd3/nv066607/poSTcode_example/S-BSST700/outputs/*.tif*"
    PoSTcode = true
    filt = false
    filt_radius = 5
}
